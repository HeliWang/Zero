
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `ZeroData`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Server=(local);Initial Catalog=Patch;Integrated Security=SSPI`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;
using Zero.Core.Web;

namespace Zero.Orm
{
	public partial class ZeroDataContext : Database
	{
		public ZeroDataContext() 
			: base("ZeroData")
		{
			CommonConstruct();
		}

		public ZeroDataContext(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			ZeroDataContext GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static ZeroDataContext GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new ZeroDataContext();
        }

		[ThreadStatic] static ZeroDataContext _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static ZeroDataContext repo { get { return ZeroDataContext.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
		}
	}
	

    
	[TableName("Admin_Base")]
	[PrimaryKey("AdminId")]
	[ExplicitColumns]
    public partial class Admin_Base : ZeroDataContext.Record<Admin_Base>  
    {
		[Column] public int AdminId { get; set; }
		[Column] public string AdminName { get; set; }
		[Column] public string RealName { get; set; }
		[Column] public string Keyt { get; set; }
		[Column] public string Password { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("News_Base")]
	[PrimaryKey("NewsId")]
	[ExplicitColumns]
    public partial class News_Base : ZeroDataContext.Record<News_Base>  
    {
		[Column] public int NewsId { get; set; }
		[Column] public int? CateId { get; set; }
		[Column] public string AdminName { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string TitleSub { get; set; }
		[Column] public string Keyword { get; set; }
		[Column] public string Author { get; set; }
		[Column] public string SourceSite { get; set; }
		[Column] public string SourceUrl { get; set; }
		[Column] public string Summary { get; set; }
		[Column] public string Photo { get; set; }
		[Column] public string Link { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public string Intro { get; set; }
		[Column] public int? ClickCount { get; set; }
		[Column] public int? CommentCount { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("Config")]
	[ExplicitColumns]
    public partial class Config : ZeroDataContext.Record<Config>  
    {
		[Column] public int ConfigId { get; set; }
		[Column] public string Name { get; set; }
		[Column] public int? Type { get; set; }
		[Column] public int? Format { get; set; }
		[Column] public string detail { get; set; }
		[Column] public string detailHtml { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("Order_Base")]
	[PrimaryKey("OrderId")]
	[ExplicitColumns]
    public partial class Order_Base : ZeroDataContext.Record<Order_Base>  
    {
		[Column] public int OrderId { get; set; }
		[Column] public string OrderNo { get; set; }
		[Column] public int? CateId { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string UserName { get; set; }
		[Column] public string CompanyName { get; set; }
		[Column] public string Address { get; set; }
		[Column] public string Phone { get; set; }
		[Column] public string Email { get; set; }
		[Column] public string Backing { get; set; }
		[Column] public decimal? Size { get; set; }
		[Column] public int? Coverage { get; set; }
		[Column] public int? Quantity { get; set; }
		[Column] public DateTime? NeedDate { get; set; }
		[Column] public string Unit { get; set; }
		[Column] public decimal? Height { get; set; }
		[Column] public decimal? Width { get; set; }
		[Column] public int? Shape { get; set; }
		[Column] public string Message { get; set; }
		[Column] public string Photo { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public decimal? Amt { get; set; }
		[Column] public string Currency { get; set; }
		[Column] public string PaymentDetail { get; set; }
		[Column] public DateTime? PaymentTime { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("Product_Cate")]
	[PrimaryKey("CateId")]
	[ExplicitColumns]
    public partial class Product_Cate : ZeroDataContext.Record<Product_Cate>  
    {
		[Column] public int CateId { get; set; }
		[Column] public string CateName { get; set; }
		[Column] public int? Lid { get; set; }
		[Column] public int? Rid { get; set; }
		[Column] public int? Depth { get; set; }
		[Column] public int? Flag { get; set; }
	}
    
	[TableName("Product_Base")]
	[PrimaryKey("ProductId")]
	[ExplicitColumns]
    public partial class Product_Base : ZeroDataContext.Record<Product_Base>  
    {
		[Column] public int ProductId { get; set; }
		[Column] public int? CateId { get; set; }
		[Column] public string ProductName { get; set; }
		[Column] public string Keyword { get; set; }
		[Column] public string photo { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public string Intro { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("Faq_Base")]
	[PrimaryKey("FaqId")]
	[ExplicitColumns]
    public partial class Faq_Base : ZeroDataContext.Record<Faq_Base>  
    {
		[Column] public int FaqId { get; set; }
		[Column] public string Title { get; set; }
		[Column] public string Name { get; set; }
		[Column] public string Email { get; set; }
		[Column] public string Question { get; set; }
		[Column] public string Answer { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("Company")]
	[ExplicitColumns]
    public partial class Company : ZeroDataContext.Record<Company>  
    {
		[Column("Company")] public string _Company { get; set; }
		[Column] public string Email { get; set; }
	}
    
	[TableName("Error_Base")]
	[ExplicitColumns]
    public partial class Error_Base : ZeroDataContext.Record<Error_Base>  
    {
		[Column] public int ErrorId { get; set; }
		[Column] public string Message { get; set; }
		[Column] public string Url { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
	}
    
	[TableName("Attachment_Base")]
	[PrimaryKey("FileId")]
	[ExplicitColumns]
    public partial class Attachment_Base : ZeroDataContext.Record<Attachment_Base>  
    {
		[Column] public int FileId { get; set; }
		[Column] public int? CateId { get; set; }
		[Column] public string Uploader { get; set; }
		[Column] public string FileName { get; set; }
		[Column] public string Url { get; set; }
		[Column] public string Ext { get; set; }
		[Column] public int? Size { get; set; }
		[Column] public int? Status { get; set; }
		[Column] public DateTime? CreateTime { get; set; }
		[Column] public DateTime? UpdateTime { get; set; }
	}
    
	[TableName("Attachment_Cate")]
	[PrimaryKey("CateId")]
	[ExplicitColumns]
    public partial class Attachment_Cate : ZeroDataContext.Record<Attachment_Cate>  
    {
		[Column] public int CateId { get; set; }
		[Column] public string CateName { get; set; }
		[Column] public int? Lid { get; set; }
		[Column] public int? Rid { get; set; }
		[Column] public int? Depth { get; set; }
		[Column] public int? Flag { get; set; }
	}
    
	[TableName("News_Cate")]
	[PrimaryKey("CateId")]
	[ExplicitColumns]
    public partial class News_Cate : ZeroDataContext.Record<News_Cate>  
    {
		[Column] public int CateId { get; set; }
		[Column] public string CateName { get; set; }
		[Column] public int? Lid { get; set; }
		[Column] public int? Rid { get; set; }
		[Column] public int? Depth { get; set; }
		[Column] public int? Flag { get; set; }
	}
    
	[TableName("Task_Base")]
	[ExplicitColumns]
    public partial class Task_Base : ZeroDataContext.Record<Task_Base>  
    {
		[Column] public int? TaskId { get; set; }
		[Column] public int? TaskPoint { get; set; }
	}
    
	[TableName("Payment")]
	[PrimaryKey("PaymentId")]
	[ExplicitColumns]
    public partial class Payment : ZeroDataContext.Record<Payment>  
    {
		[Column] public int PaymentId { get; set; }
		[Column] public string OrderId { get; set; }
		[Column] public string PayerId { get; set; }
		[Column] public string Token { get; set; }
		[Column] public string PaymentType { get; set; }
		[Column] public string Currency { get; set; }
		[Column] public decimal? Amt { get; set; }
		[Column] public string Status { get; set; }
		[Column] public string Method { get; set; }
		[Column] public string RequestString { get; set; }
		[Column] public string ResponseString { get; set; }
		[Column] public DateTime CreateTime { get; set; }
	}
}


